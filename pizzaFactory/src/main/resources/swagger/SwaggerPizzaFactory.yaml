openapi: 3.0.2
info:
  title: Order-api
  description: The experience API for integration between the order UI and the api micro-services in the backend
  version: 1.0.1
paths:
  /options/toppings:
    get:
      summary: Gets all the toppings
      description: Gets all the toppings
      operationId: getAllToppings
      tags:
      - Orders
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanonicalModelWithToppings'
              examples:
                Toppings:
                  $ref: '#/components/examples/CanonicalModelWithToppings'
  /options/bases:
    get:
      summary: Gets all the bases
      description: Gets all the bases
      operationId: getAllBases
      tags:
      - Orders
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanonicalModelWithBase'
              examples:
                Toppings:
                  $ref: '#/components/examples/CanonicalModelWithBase'                
  /orders: 
    post:
      summary: Creates an order.
      description: Creates an order in the database using the Json body sent with the request
      operationId: postOrder
      tags:
      - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanonicalModelWithOrder'
            examples:
              OrderNoId:
                $ref: '#/components/examples/CanonicalModelWithOrder'
      responses:
        '201':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanonicalModelWithOrderWithTime'
              examples:
                IdAcknowledgement:
                  $ref: '#/components/examples/CanonicalModelWithOrderWithTime'  
  /orders/{orderId}:
    get:
      summary: Gets order by order Id
      description: Get order of pizza by ID
      operationId: getOrderByOrderId
      tags:
      - Orders
      parameters:
      - name: orderId
        in: path
        description: ID of order/s whose order the request will return
        required: true
        schema:
          type: integer
          example: 1234
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanonicalModelWithOrderWithTime'
              examples:
                Profile:
                  $ref: '#/components/examples/CanonicalModelWithOrderWithTime'                
components:
  schemas:
    ToppingList:
      type: array
      items:
        $ref: '#/components/schemas/Toppings'
    BaseList:
      type: array
      items:
        $ref: '#/components/schemas/Base'
    Toppings:
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
        cookingTime:
          type: integer
    Base:
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
        cookingTime:
          type: integer
    OrderItem:
      type: object
      properties:
        Time:
          $ref: '#/components/schemas/Time'
        OrderId:
          $ref: '#/components/schemas/OrderId'
    Time:
      type: integer
      
    OrderId:
      type: integer
      minLength: 1
      maxLength: 500
    CanonicalModelWithBase: 
      type: object
      properties:
        correlationId:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
        payload:
          $ref: '#/components/schemas/BaseList'
        error:
          example: null
    CanonicalModelWithToppings:
      type: object
      properties:
        correlationId:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
        payload:
          $ref: '#/components/schemas/ToppingList'
        error:
          example: null  
    CanonicalModelWithOrder: 
      type: object
      properties:
        correlationId:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
        payload:
          type: object
          properties:
            Toppings:
              $ref: '#/components/schemas/Toppings'
            Base: 
              $ref: '#/components/schemas/Base'
        error:
          example: null   
    CanonicalModelWithOrderWithTime: 
      type: object
      properties:
        correlationId:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
        payload:
          $ref: '#/components/schemas/OrderItem'
        error:
          example: null   
  examples:
    CanonicalModelWithToppings:
      summary: Example with a response (with id) for a post request
      value:
        correlationId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        sessionId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        payload:
          Toppings: 
          - Name: Cheese
            Price: 1.99
            CookingTime: 100
          - Name: Tomato
            Price: 2.99
            CookingTime: 150
          - Name: Basil
            Price: 3.99
            CookingTime: 200
          - Name: Sweetcorn
            Price: 3.99
            CookingTime: 200
        error: null 
    CanonicalModelWithOrder:
      summary: Example with one order in the payload
      value:
        correlationId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        sessionId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        payload:
          Toppings:
          - cheese
          - tomato
          - basil
          Base: Thin crust
        error: null    
    CanonicalModelWithOrderNoId:
      summary: Example with one profile in the payload (no id)
      value:
        correlationId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        sessionId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        payload:
          Toppings:
          - cheese
          Base: Thin crust
        error: null    
    CanonicalModelWithIdAcknowledgement:
      summary: Example with a response (with id) for a post request
      value:
        correlationId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        sessionId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        payload:
          UserId: 1234
          Acknowledgement: 9cebc3dc-b5dc-4131-8a41-c6699e8ae56b
          Message: Thank you, we have received your request for processing
        error: null
    CanonicalModelWithBase:
      summary: Example with a response (with id) for a post request
      value:
        correlationId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        sessionId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        payload:
          - Name: Thin Crust
            Price: 1.99
            CookingTime: 100
          - Name: Deep Pan
            Price: 2.99
            CookingTime: 150
          - Name: Third Option
            Price: 3.99
            CookingTime: 200
        error: null      
    CanonicalModelWithOrderWithTime: 
      summary: Example with a response (with id) for a post request
      value:
        correlationId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        sessionId: e30bc719-ff94-4b1c-8567-ecc01fcefe85
        payload: 
          Time: 600
          OrderId: 1234
        error: null  
                  